@model GarageVParrot.ViewModels.HomeViewModel

<section class="services">
    <h2>Nos Services</h2>
	@foreach(Service service in @Model.Services)
	{
		<div class="service-div p-2 container">
			<div class="image-service-container m-2">
				<img class="service-image" src="~/Uploads/ServicesImage/@service.Image" alt="Image du service" />
			</div>
			<div class="service-text">
				<h3 class="service-title mb-1">@Html.DisplayFor(modelItem => service.Title)</h3>
				<p class="text-description">@Html.Raw(service.Description)</p>
			</div>
		</div>
	}
</section>
 
<section class="reviews">
    <h2>Quelques Témoignages</h2>

    <div id="wrapper-review">
        <div id="carousel-review">
            <div id="content-review">
                @{
                    List<Review> selectedReviews = Model.Reviews.Where(review => review.Accepted && review.Rating == 5).OrderBy(review => review.datePublished).Take(10).ToList();
                }
                @foreach (Review review in selectedReviews)
                {
                    if (review.Accepted == true && review.Rating == 5)
                    {
                        <div class="item-review" >
                            <div class="card-review">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <div class="rating">
                                        @for (int r = 0; r < review.Rating; r++)
                                        {
                                            <i class="bi bi-star-fill"></i>
                                        }
                                        @for (int r = review.Rating; r < 5; r++)
                                        {
                                            <i class="bi bi-star"></i>
                                        }
                                    </div>
                                    <div>
                                        @{
                                            string parameterValue = review.datePublished.ToString("MMMM yyyy");
                                        }
                                        @Html.DisplayFor(modelItem =>parameterValue)
                                    </div>
                                </div>
                                <div class="card-body p-1 d-block d-flex">
                                    <q>@Html.DisplayFor(modelItem => review.Description)</q>
                                    <p class="mt-2">@Html.DisplayFor(modelItem => review.Name)</p>
                                </div>

                            </div>
                        </div>
                    }
                }
                
            </div>
        </div>
        <button id="prev">
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="24"
                 height="24"
                 viewBox="0 0 24 24">
                <path fill="none" d="M0 0h24v24H0V0z" />
                <path d="M15.61 7.41L14.2 6l-6 6 6 6 1.41-1.41L11.03 12l4.58-4.59z" />
            </svg>
        </button>
        <button id="next">
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="24"
                 height="24"
                 viewBox="0 0 24 24">
                <path fill="none" d="M0 0h24v24H0V0z" />
                <path d="M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z" />
            </svg>
        </button>
    </div>
</section>

@section Scripts {
    <script type="text/javascript" src="~/js/HomeScript.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}